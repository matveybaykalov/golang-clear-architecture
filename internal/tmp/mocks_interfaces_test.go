package usecase_test
// Code generated by MockGen. DO NOT EDIT.
// Source: Interfaces.go

// Package usecase_test is a generated GoMock package.

import (
	entity "clear-arch/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBooks is a mock of Books interface.
type MockBooks struct {
	ctrl     *gomock.Controller
	recorder *MockBooksMockRecorder
}

// MockBooksMockRecorder is the mock recorder for MockBooks.
type MockBooksMockRecorder struct {
	mock *MockBooks
}

// NewMockBooks creates a new mock instance.
func NewMockBooks(ctrl *gomock.Controller) *MockBooks {
	mock := &MockBooks{ctrl: ctrl}
	mock.recorder = &MockBooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooks) EXPECT() *MockBooksMockRecorder {
	return m.recorder
}

// GetBooks mocks base method.
func (m *MockBooks) GetBooks(arg0 context.Context) ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", arg0)
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockBooksMockRecorder) GetBooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBooks)(nil).GetBooks), arg0)
}

// MockBooksRepo is a mock of BooksRepo interface.
type MockBooksRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBooksRepoMockRecorder
}

// MockBooksRepoMockRecorder is the mock recorder for MockBooksRepo.
type MockBooksRepoMockRecorder struct {
	mock *MockBooksRepo
}

// NewMockBooksRepo creates a new mock instance.
func NewMockBooksRepo(ctrl *gomock.Controller) *MockBooksRepo {
	mock := &MockBooksRepo{ctrl: ctrl}
	mock.recorder = &MockBooksRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksRepo) EXPECT() *MockBooksRepoMockRecorder {
	return m.recorder
}

// GetBooksByName mocks base method.
func (m *MockBooksRepo) GetBooksByName(arg0 context.Context, arg1 string) ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksByName", arg0, arg1)
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksByName indicates an expected call of GetBooksByName.
func (mr *MockBooksRepoMockRecorder) GetBooksByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksByName", reflect.TypeOf((*MockBooksRepo)(nil).GetBooksByName), arg0, arg1)
}

// StoreBook mocks base method.
func (m *MockBooksRepo) StoreBook(arg0 context.Context, arg1 entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBook indicates an expected call of StoreBook.
func (mr *MockBooksRepoMockRecorder) StoreBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBook", reflect.TypeOf((*MockBooksRepo)(nil).StoreBook), arg0, arg1)
}

// StoreBooks mocks base method.
func (m *MockBooksRepo) StoreBooks(arg0 context.Context, arg1 []entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBooks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBooks indicates an expected call of StoreBooks.
func (mr *MockBooksRepoMockRecorder) StoreBooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBooks", reflect.TypeOf((*MockBooksRepo)(nil).StoreBooks), arg0, arg1)
}

// MockBooksParser is a mock of BooksParser interface.
type MockBooksParser struct {
	ctrl     *gomock.Controller
	recorder *MockBooksParserMockRecorder
}

// MockBooksParserMockRecorder is the mock recorder for MockBooksParser.
type MockBooksParserMockRecorder struct {
	mock *MockBooksParser
}

// NewMockBooksParser creates a new mock instance.
func NewMockBooksParser(ctrl *gomock.Controller) *MockBooksParser {
	mock := &MockBooksParser{ctrl: ctrl}
	mock.recorder = &MockBooksParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksParser) EXPECT() *MockBooksParserMockRecorder {
	return m.recorder
}

// GetBooks mocks base method.
func (m *MockBooksParser) GetBooks(arg0 context.Context) ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", arg0)
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockBooksParserMockRecorder) GetBooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBooksParser)(nil).GetBooks), arg0)
}

// MockBooksParserRepo is a mock of BooksParserRepo interface.
type MockBooksParserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBooksParserRepoMockRecorder
}

// MockBooksParserRepoMockRecorder is the mock recorder for MockBooksParserRepo.
type MockBooksParserRepoMockRecorder struct {
	mock *MockBooksParserRepo
}

// NewMockBooksParserRepo creates a new mock instance.
func NewMockBooksParserRepo(ctrl *gomock.Controller) *MockBooksParserRepo {
	mock := &MockBooksParserRepo{ctrl: ctrl}
	mock.recorder = &MockBooksParserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksParserRepo) EXPECT() *MockBooksParserRepoMockRecorder {
	return m.recorder
}

// GetDataFromFile mocks base method.
func (m *MockBooksParserRepo) GetDataFromFile(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFromFile indicates an expected call of GetDataFromFile.
func (mr *MockBooksParserRepoMockRecorder) GetDataFromFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromFile", reflect.TypeOf((*MockBooksParserRepo)(nil).GetDataFromFile), arg0)
}

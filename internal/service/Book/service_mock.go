// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package book is a generated GoMock package.
package book

import (
	entity "clear-arch/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookRepo is a mock of BookRepo interface.
type MockBookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepoMockRecorder
}

// MockBookRepoMockRecorder is the mock recorder for MockBookRepo.
type MockBookRepoMockRecorder struct {
	mock *MockBookRepo
}

// NewMockBookRepo creates a new mock instance.
func NewMockBookRepo(ctrl *gomock.Controller) *MockBookRepo {
	mock := &MockBookRepo{ctrl: ctrl}
	mock.recorder = &MockBookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepo) EXPECT() *MockBookRepoMockRecorder {
	return m.recorder
}

// GetAllBooks mocks base method.
func (m *MockBookRepo) GetAllBooks(arg0 context.Context) ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks", arg0)
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockBookRepoMockRecorder) GetAllBooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockBookRepo)(nil).GetAllBooks), arg0)
}

// StoreBooks mocks base method.
func (m *MockBookRepo) StoreBooks(arg0 context.Context, arg1 []entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBooks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBooks indicates an expected call of StoreBooks.
func (mr *MockBookRepoMockRecorder) StoreBooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBooks", reflect.TypeOf((*MockBookRepo)(nil).StoreBooks), arg0, arg1)
}
